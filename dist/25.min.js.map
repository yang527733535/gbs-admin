{"version":3,"file":"25.min.js","sources":["webpack:///./node_modules/_@arco-design_web-react@2.28.0@@arco-design/web-react/es/Tree/animation.js","webpack:///./node_modules/_@arco-design_web-react@2.28.0@@arco-design/web-react/es/Tree/context.js","webpack:///./node_modules/_@arco-design_web-react@2.28.0@@arco-design/web-react/es/Tree/index.js","webpack:///./node_modules/_@arco-design_web-react@2.28.0@@arco-design/web-react/es/Tree/node-list.js","webpack:///./node_modules/_@arco-design_web-react@2.28.0@@arco-design/web-react/es/Tree/node.js","webpack:///./node_modules/_@arco-design_web-react@2.28.0@@arco-design/web-react/es/Tree/style/index.js","webpack:///./node_modules/_@arco-design_web-react@2.28.0@@arco-design/web-react/es/Tree/style/index.less?d2ef","webpack:///./node_modules/_@arco-design_web-react@2.28.0@@arco-design/web-react/es/Tree/util.js","webpack:///./node_modules/_@babel_runtime@7.16.7@@babel/runtime/helpers/objectDestructuringEmpty.js","webpack:///./node_modules/_@arco-design_web-react@2.28.0@@arco-design/web-react/es/Tree/style/index.less"],"sourcesContent":["/**\n * 该组件用来切换tree 展开收起时的动画\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useMemo, useContext, useEffect } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { TreeContext } from './context';\nimport VirtualList from '../_class/VirtualList';\nimport { ConfigContext } from '../ConfigProvider';\nimport Node from './node';\nimport { isNumber } from '../_util/is';\nfunction getKey(option) {\n    return option.key || option._key;\n}\nvar TreeAnimation = function (props) {\n    var _a;\n    var treeContext = useContext(TreeContext);\n    var getPrefixCls = useContext(ConfigContext).getPrefixCls;\n    var prefixCls = getPrefixCls('tree-node');\n    var _b = treeContext.getTreeState(), expandedKeys = _b.expandedKeys, currentExpandKeys = _b.currentExpandKeys;\n    var expanded = props.expanded;\n    useEffect(function () {\n        return function () {\n            treeContext.onExpandEnd && treeContext.onExpandEnd(props._key);\n        };\n    }, []);\n    var childrenPropsList = useMemo(function () {\n        var result = [];\n        var loop = function (list) {\n            list.forEach(function (item) {\n                var data = treeContext.getFieldInfo(item);\n                result.push(data);\n                if (data.children && data.children.length) {\n                    loop(data.children);\n                }\n            });\n        };\n        loop(props.childrenData || []);\n        return result;\n    }, [props.childrenData]);\n    var filtedData = useMemo(function () {\n        var result = [];\n        if (childrenPropsList.length) {\n            var expandedKeysSet_1 = new Set(expandedKeys || []);\n            childrenPropsList.forEach(function (data) {\n                var _a;\n                var isShow;\n                var itemProps = __assign({}, treeContext.key2nodeProps[data.key]);\n                if (expanded) {\n                    // 只有在每一个父节点都是展开状态时，自己才会展示出来\n                    isShow =\n                        itemProps.parentKey === props._key ||\n                            ((_a = itemProps.pathParentKeys) === null || _a === void 0 ? void 0 : _a.every(function (key) {\n                                return expandedKeysSet_1.has(key);\n                            }));\n                }\n                else if (itemProps.pathParentKeys) {\n                    // 收起时，只有在props._key 对应的位置之后的所有的自己的父节点都是展开状态，才会展示自己\n                    var index = itemProps.pathParentKeys.indexOf(props._key);\n                    isShow = itemProps.pathParentKeys.slice(index + 1).every(function (key) {\n                        return expandedKeysSet_1.has(key);\n                    });\n                }\n                if (isShow) {\n                    result.push(__assign(__assign(__assign({}, itemProps), treeContext.getNodeProps(itemProps, expandedKeysSet_1)), { key: data.key }));\n                }\n            });\n        }\n        return result;\n    }, [childrenPropsList, props._key, expanded]);\n    var realHeight = (_a = treeContext.virtualListProps) === null || _a === void 0 ? void 0 : _a.height;\n    realHeight = isNumber(realHeight) ? realHeight : 0;\n    useEffect(function () {\n        // node set loadingMore but has no child nodes.\n        // Animation will not be triggered and needs to be removed manually\n        if (currentExpandKeys.indexOf(props._key) > -1 && filtedData.length === 0) {\n            treeContext.onExpandEnd(props._key);\n        }\n    }, [filtedData, currentExpandKeys]);\n    return (React.createElement(CSSTransition, { in: currentExpandKeys.indexOf(props._key) > -1 && filtedData.length > 0, unmountOnExit: true, classNames: \"tree-slide-expand\", timeout: {\n            enter: 200,\n            exit: 0,\n        }, onEnter: function (e) {\n            var scrollHeight = e.scrollHeight;\n            e.style.height = expanded ? 0 : Math.min(realHeight || scrollHeight, e.scrollHeight) + \"px\";\n        }, onEntering: function (e) {\n            var scrollHeight = e.scrollHeight;\n            e.style.height = expanded ? Math.min(realHeight || scrollHeight, scrollHeight) + \"px\" : 0;\n        }, onEntered: function (e) {\n            e.style.height = props.expanded ? '' : 0;\n            treeContext.onExpandEnd(props._key);\n        }, onExit: function (e) {\n            e.style.display = 'none';\n        } },\n        React.createElement(VirtualList, __assign({ itemKey: getKey, className: prefixCls + \"-list\", isStaticItemHeight: false }, treeContext.virtualListProps, { data: filtedData, style: { overflow: 'hidden' } }), function (child) {\n            return React.createElement(Node, __assign({}, child));\n        })));\n};\nexport default TreeAnimation;\n","import { createContext } from 'react';\nexport var TreeContext = createContext({});\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport React, { Component } from 'react';\nimport isEqualWith from 'lodash/isEqualWith';\nimport cs from '../_util/classNames';\nimport Node from './node';\nimport NodeList from './node-list';\nimport { isEmptyObject, isFunction } from '../_util/is';\nimport { ConfigContext } from '../ConfigProvider';\nimport { getAllCheckedKeysByCheck, getCheckedKeysByInitKeys, getTreeDataFromTreeChildren, } from './util';\nimport { TreeContext } from './context';\nimport mergeProps from '../_util/mergeProps';\nvar DefaultFieldNames = {\n    key: 'key',\n    title: 'title',\n    children: 'children',\n    selectable: 'selectable',\n    disabled: 'disabled',\n    disableCheckbox: 'disableCheckbox',\n    checkable: 'checkable',\n    isLeaf: 'isLeaf',\n};\nvar defaultProps = {\n    selectable: true,\n    autoExpandParent: true,\n    checkedStrategy: 'all',\n    allowDrop: function () { return true; },\n    fieldNames: DefaultFieldNames,\n};\nvar needMergeKeys = [\n    'style',\n    'className',\n    'height',\n    'size',\n    'blockNode',\n    'autoExpandParent',\n    'checkedStrategy',\n    'fieldNames',\n    'icons',\n    'virtualListProps',\n    'showLine',\n    'selectable',\n    'allowDrop',\n];\nvar Tree = /** @class */ (function (_super) {\n    __extends(Tree, _super);\n    function Tree(props, context) {\n        var _this = _super.call(this, props, context) || this;\n        // 依旧使用NodeInstance 是为了兼容1.x的一些用法，改动较大\n        _this.cacheNodes = {};\n        _this.key2nodeProps = {};\n        _this.getMergedProps = function (baseProps) {\n            var componentConfig = _this.context.componentConfig;\n            var props = mergeProps(baseProps || _this.props, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Tree);\n            return Object.keys(props).reduce(function (total, key) {\n                if (needMergeKeys.indexOf(key) > -1) {\n                    total[key] = props[key];\n                }\n                return total;\n            }, {});\n        };\n        // index: 第几个dom元素, 如果传入的是字符串，会作为 node 的 key去查找。\n        // nodeProps 参数似乎咩有什么用。。。但是不知道外部有没有调用，就当key用吧。。\n        _this.scrollIntoView = function (_index, nodeProps) {\n            var index = _index;\n            if (typeof _index === 'string' || nodeProps) {\n                // 作为key\n                index = _index || nodeProps._key;\n            }\n            if (_this.nodeListRef) {\n                _this.nodeListRef.scrollIntoView(index, nodeProps || _this.key2nodeProps[index]);\n            }\n        };\n        _this.getTreeData = function () {\n            return 'treeData' in _this.props\n                ? _this.props.treeData\n                : getTreeDataFromTreeChildren(_this.props.children);\n        };\n        // 以下外部传入的属性改变时，需要更新nodeList\n        _this.needUpdateTreeData = function (prevProps, props) {\n            var keys = [\n                'fieldNames',\n                'selectable',\n                'draggable',\n                'checkStrictly',\n                'showLine',\n                'blockNode',\n                'checkable',\n                'treeData',\n                'children',\n            ];\n            return (prevProps.treeData !== props.treeData ||\n                prevProps.children !== props.children ||\n                keys.some(function (key) { return isEqualWith(prevProps[key], props[key]); }));\n        };\n        // 根据 fieldNames 获取节点数据\n        _this.getFieldInfo = function (data) {\n            var mergedProps = _this.getMergedProps();\n            var selectable = mergedProps.selectable;\n            // fieldsNames 仅在treeData时生效。\n            var fieldNames = __assign(__assign({}, DefaultFieldNames), ('treeData' in _this.props ? mergedProps.fieldNames : {}));\n            var result = {\n                children: data[fieldNames.children],\n                selectable: fieldNames.selectable in data ? data[fieldNames.selectable] : selectable,\n                checkable: fieldNames.checkable in data ? data[fieldNames.checkable] : _this.props.checkable,\n                title: data[fieldNames.title],\n                disabled: data[fieldNames.disabled],\n                disableCheckbox: data[fieldNames.disableCheckbox],\n                isLeaf: data[fieldNames.isLeaf],\n                key: data[fieldNames.key],\n            };\n            if (!(fieldNames.key in data)) {\n                delete result.key;\n            }\n            return result;\n        };\n        _this.getNodeList = function (treedata, prefix) {\n            _this.key2nodeProps = {};\n            var prefixCls = prefix || _this.context.getPrefixCls('tree');\n            var nodeList = [];\n            var currentIndex = 0;\n            var _a = _this.getMergedProps(), showLine = _a.showLine, blockNode = _a.blockNode;\n            var loop = function (treeData, father) {\n                var totalLength = treeData.length;\n                return treeData.map(function (data, index) {\n                    var _a = _this.getFieldInfo(data), children = _a.children, selectable = _a.selectable, checkable = _a.checkable, _b = _a.key, key = _b === void 0 ? ((father === null || father === void 0 ? void 0 : father._key) || '') + \"-\" + index : _b, rest = __rest(_a, [\"children\", \"selectable\", \"checkable\", \"key\"]);\n                    var nodeProps = __assign(__assign(__assign({ \n                        // data 中含有dataRef时，优先级较高\n                        dataRef: data, draggable: _this.props.draggable, selectable: selectable, checkable: checkable, showLine: showLine, blockNode: blockNode }, data), rest), { key: key, children: children, _key: key, _index: currentIndex++, parentKey: father ? father._key : undefined, pathParentKeys: (father && father.pathParentKeys) || [], _level: father._level || 0, \n                        // 保存node在sowLine模式下是否显示缩进线。如果父节点是其所在层级的最后一个节点，那么所有的子节点（包括孙子节点等）在父节点所在层级的缩进格都不显示缩进线。\n                        _lineless: father && father._lineless ? __spreadArray(__spreadArray([], __read((father._lineless || [])), false), [father._isTail], false) : [] });\n                    if (totalLength === index + 1) {\n                        nodeProps.className = cs(prefixCls + \"-node-is-tail\", nodeProps.className);\n                    }\n                    nodeList.push(nodeProps);\n                    _this.key2nodeProps[key] = nodeProps;\n                    if (children && children.length) {\n                        _this.key2nodeProps[key].children = loop(children, {\n                            _key: key,\n                            _level: nodeProps._level + 1,\n                            _lineless: nodeProps._lineless,\n                            _isTail: totalLength === index + 1,\n                            pathParentKeys: __spreadArray(__spreadArray([], __read(((father === null || father === void 0 ? void 0 : father.pathParentKeys) || [])), false), [key], false),\n                        });\n                    }\n                    return nodeProps;\n                });\n            };\n            loop(treedata || [], {});\n            return nodeList;\n        };\n        _this.getInitExpandedKeys = function (keys) {\n            if (!_this.getMergedProps().autoExpandParent) {\n                return keys || [];\n            }\n            if (!keys) {\n                return Object.keys(_this.key2nodeProps).filter(function (key) {\n                    var props = _this.key2nodeProps[key];\n                    return props.children && props.children.length;\n                });\n            }\n            var expandedKeys = {};\n            keys.forEach(function (key) {\n                var item = _this.key2nodeProps[key];\n                if (!item) {\n                    return;\n                }\n                expandedKeys[key] = 1;\n                if (item.pathParentKeys) {\n                    item.pathParentKeys.forEach(function (x) {\n                        expandedKeys[x] = 1;\n                    });\n                }\n            });\n            return Object.keys(expandedKeys);\n        };\n        _this.getInitCheckedKeys = function (keys) {\n            if (!_this.props.checkStrictly) {\n                var _a = getCheckedKeysByInitKeys(keys, _this.key2nodeProps), checkedKeys = _a.checkedKeys, indeterminateKeys = _a.indeterminateKeys;\n                return {\n                    checkedKeys: checkedKeys,\n                    halfCheckedKeys: indeterminateKeys,\n                };\n            }\n            return {\n                checkedKeys: keys,\n                halfCheckedKeys: _this.props.halfCheckedKeys || [],\n            };\n        };\n        _this.handleSelect = function (key, e) {\n            var onSelect = _this.props.onSelect;\n            var extra = { e: e, node: _this.cacheNodes[key] };\n            if (_this.props.multiple) {\n                var selectedKeys = __spreadArray([], __read(_this.state.selectedKeys), false);\n                var index = selectedKeys.indexOf(key);\n                if (index > -1) {\n                    selectedKeys.splice(index, 1);\n                    extra.selected = false;\n                }\n                else {\n                    extra.selected = true;\n                    selectedKeys.push(key);\n                }\n                extra.selectedNodes = selectedKeys.map(function (x) { return _this.cacheNodes[x]; });\n                if (!('selectedKeys' in _this.props)) {\n                    _this.setState({ selectedKeys: selectedKeys });\n                }\n                onSelect && onSelect(selectedKeys, extra);\n            }\n            else {\n                extra.selected = true;\n                extra.selectedNodes = [_this.cacheNodes[key]];\n                if (!('selectedKeys' in _this.props)) {\n                    _this.setState({ selectedKeys: [key] });\n                }\n                onSelect && onSelect([key], extra);\n            }\n        };\n        _this.handleCheck = function (checked, key, e) {\n            var checkedStrategy = _this.getMergedProps().checkedStrategy;\n            var _a = _this.props, onCheck = _a.onCheck, checkStrictly = _a.checkStrictly;\n            var extra = { e: e, node: _this.cacheNodes[key] };\n            var checkedKeys = _this.state.checkedKeys;\n            var halfCheckedKeys = _this.state.halfCheckedKeys;\n            if (checkStrictly) {\n                if (checked) {\n                    checkedKeys = checkedKeys.concat(key);\n                }\n                else {\n                    checkedKeys = checkedKeys.filter(function (item) { return item !== key; });\n                }\n                var newState = {};\n                if (!('checkedKeys' in _this.props)) {\n                    newState.checkedKeys = checkedKeys;\n                }\n                if (!('halfCheckedKeys' in _this.props)) {\n                    newState.halfCheckedKeys = halfCheckedKeys;\n                }\n                if (!isEmptyObject(newState)) {\n                    _this.setState(__assign({}, newState));\n                }\n            }\n            else {\n                // 找到所有允许勾选的子节点\n                var _b = getAllCheckedKeysByCheck(key, checked, checkedKeys, _this.key2nodeProps, halfCheckedKeys), newCheckedKeys = _b.checkedKeys, indeterminateKeys = _b.indeterminateKeys;\n                checkedKeys = newCheckedKeys;\n                halfCheckedKeys = indeterminateKeys;\n                if (!('checkedKeys' in _this.props)) {\n                    _this.setState({ checkedKeys: checkedKeys, halfCheckedKeys: halfCheckedKeys });\n                }\n                else {\n                    _this.setState({ halfCheckedKeys: halfCheckedKeys });\n                }\n                if (checkedStrategy === Tree.SHOW_PARENT) {\n                    checkedKeys = checkedKeys.filter(function (x) {\n                        var item = _this.key2nodeProps[x];\n                        if (!item || checkedKeys.indexOf(item.parentKey) === -1) {\n                            return true;\n                        }\n                    });\n                }\n                else if (checkedStrategy === Tree.SHOW_CHILD) {\n                    checkedKeys = checkedKeys.filter(function (x) {\n                        var item = _this.key2nodeProps[x];\n                        if (!item || !item.children || !item.children.length) {\n                            return true;\n                        }\n                    });\n                }\n            }\n            onCheck &&\n                onCheck(checkedKeys, __assign({ checkedNodes: checkedKeys.map(function (x) { return _this.cacheNodes[x]; }).filter(function (x) { return x; }), checked: checked, halfCheckedKeys: halfCheckedKeys, halfCheckedNodes: halfCheckedKeys.map(function (x) { return _this.cacheNodes[x]; }).filter(function (x) { return x; }) }, extra));\n        };\n        _this.handleLoadMore = function (node) {\n            var loadMore = _this.props.loadMore;\n            if (isFunction(loadMore)) {\n                var _a = _this.state, _b = _a.loadingKeys, loadingKeys = _b === void 0 ? [] : _b, loadedKeys = _a.loadedKeys;\n                _this.setState({\n                    loadingKeys: Array.from(new Set(__spreadArray(__spreadArray([], __read(loadingKeys), false), [node._key], false))),\n                    loadedKeys: loadedKeys.filter(function (x) { return x !== node._key; }),\n                }, function () { return __awaiter(_this, void 0, void 0, function () {\n                    var e_1;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                _a.trys.push([0, 2, , 3]);\n                                return [4 /*yield*/, loadMore(this.cacheNodes[node._key])];\n                            case 1:\n                                _a.sent();\n                                this.setState({\n                                    loadedKeys: Array.from(new Set(__spreadArray(__spreadArray([], __read(this.state.loadedKeys), false), [node._key], false))),\n                                    loadingKeys: this.state.loadingKeys.filter(function (x) { return x !== node._key; }),\n                                });\n                                this.handleExpand(!node.expanded, node._key);\n                                return [3 /*break*/, 3];\n                            case 2:\n                                e_1 = _a.sent();\n                                console.error('[tree]load data error: ', e_1);\n                                this.setState({\n                                    loadingKeys: this.state.loadingKeys.filter(function (x) { return x !== node._key; }),\n                                });\n                                return [3 /*break*/, 3];\n                            case 3: return [2 /*return*/];\n                        }\n                    });\n                }); });\n            }\n        };\n        _this.handleNodeDragStart = function (e, node) {\n            _this.dragNode = _this.cacheNodes[node._key];\n            _this.dropPosition = 0;\n            var onDragStart = _this.props.onDragStart;\n            onDragStart && onDragStart(e, _this.cacheNodes[node._key]);\n        };\n        _this.handleNodeDragEnd = function (e, node) {\n            _this.dragNode = null;\n            _this.dropPosition = 0;\n            var onDragEnd = _this.props.onDragEnd;\n            onDragEnd && onDragEnd(e, _this.cacheNodes[node._key]);\n        };\n        _this.handleNodeDragOver = function (e, node, dropPosition) {\n            _this.dropPosition = dropPosition;\n            var onDragOver = _this.props.onDragOver;\n            onDragOver && onDragOver(e, _this.cacheNodes[node._key]);\n        };\n        _this.handleNodeDragLeave = function (e, node) {\n            // this.dropNode = null;\n            _this.dropPosition = 0;\n            var onDragLeave = _this.props.onDragLeave;\n            onDragLeave && onDragLeave(e, _this.cacheNodes[node._key]);\n        };\n        _this.isChildOfNode = function (node, target) {\n            var current = _this.key2nodeProps[node.parentKey];\n            while (current) {\n                var _key = current._key, parentKey = current.parentKey;\n                if (_key === target.props._key) {\n                    return true;\n                }\n                if (parentKey === _key)\n                    return;\n                current = _this.key2nodeProps[parentKey];\n            }\n        };\n        _this.isSameNode = function (node1, node2) {\n            // 对比 node\n            if (node1 === undefined || node2 === undefined)\n                return false;\n            if (node1 === node2)\n                return true;\n            // 对比 node.key\n            var key1 = node1.key;\n            var key2 = node2.key;\n            if (key1 !== undefined || key2 !== undefined)\n                return key1 === key2;\n            // 对比 node.props._key\n            var _key1 = node1.props._key;\n            var _key2 = node2.props._key;\n            if (_key1 === undefined && _key2 === undefined)\n                return false;\n            return _key1 === _key2;\n        };\n        _this.handleNodeDrop = function (e, node, dropPosition) {\n            if (_this.dragNode) {\n                var allowDrop = _this.getMergedProps().allowDrop;\n                var onDrop = _this.props.onDrop;\n                var nodeInstance = _this.cacheNodes[node._key];\n                if (onDrop &&\n                    !_this.isChildOfNode(node, _this.dragNode) &&\n                    !_this.isSameNode(_this.dragNode, nodeInstance)) {\n                    if (allowDrop && !allowDrop({ dropNode: nodeInstance, dropPosition: dropPosition })) {\n                        return;\n                    }\n                    onDrop({\n                        dragNode: _this.dragNode,\n                        dropNode: nodeInstance,\n                        dropPosition: dropPosition,\n                        e: e,\n                    });\n                }\n            }\n        };\n        _this.handleAllowDrop = function (node, dropPosition) {\n            var allowDrop = _this.getMergedProps().allowDrop;\n            var isAllowDrop = true;\n            if (typeof allowDrop === 'function') {\n                isAllowDrop = allowDrop({ dropNode: _this.cacheNodes[node._key], dropPosition: dropPosition });\n            }\n            return isAllowDrop;\n        };\n        _this.handleExpand = function (expanded, key) {\n            var _a = _this.state, currentExpandKeys = _a.currentExpandKeys, _b = _a.expandedKeys, expandedKeys = _b === void 0 ? [] : _b;\n            var onExpand = _this.props.onExpand;\n            if (currentExpandKeys.indexOf(key) > -1) {\n                // 如果当前key节点正在展开/收起，不执行操作。\n                return;\n            }\n            var newExpandedKeys = [];\n            if (expanded) {\n                newExpandedKeys = Array.from(new Set(__spreadArray(__spreadArray([], __read(expandedKeys), false), [key], false)));\n            }\n            else {\n                newExpandedKeys = expandedKeys.filter(function (k) { return k !== key; });\n            }\n            if (!('expandedKeys' in _this.props)) {\n                _this.setState({\n                    expandedKeys: newExpandedKeys,\n                    currentExpandKeys: __spreadArray(__spreadArray([], __read(currentExpandKeys), false), [key], false),\n                });\n            }\n            onExpand &&\n                onExpand(newExpandedKeys, {\n                    expanded: expanded,\n                    node: _this.cacheNodes[key],\n                    expandedNodes: newExpandedKeys.map(function (x) { return _this.cacheNodes[x]; }).filter(function (x) { return x; }),\n                });\n        };\n        // 传入构建好的expandedKeysSet\n        _this.getNodeProps = function (nodeProps, expandedKeysSet) {\n            var autoExpandParent = _this.getMergedProps().autoExpandParent;\n            var loadMore = _this.props.loadMore;\n            var _a = _this.state, selectedKeys = _a.selectedKeys, expandedKeys = _a.expandedKeys, checkedKeys = _a.checkedKeys, halfCheckedKeys = _a.halfCheckedKeys, _b = _a.loadingKeys, loadingKeys = _b === void 0 ? [] : _b, _c = _a.loadedKeys, loadedKeys = _c === void 0 ? [] : _c;\n            var hasChildren = nodeProps.children && nodeProps.children.length;\n            var otherProps = {\n                isLeaf: !hasChildren,\n                autoExpandParent: hasChildren ? autoExpandParent : false,\n                expanded: expandedKeysSet\n                    ? expandedKeysSet.has(nodeProps._key)\n                    : expandedKeys.indexOf(nodeProps._key) > -1,\n            };\n            if (loadMore) {\n                var loaded = loadedKeys.indexOf(nodeProps._key) > -1;\n                otherProps.loaded = loaded;\n                otherProps.isLeaf = hasChildren ? false : nodeProps.isLeaf;\n            }\n            return __assign(__assign(__assign({}, nodeProps), otherProps), { selected: selectedKeys && selectedKeys.indexOf(nodeProps._key) > -1, indeterminated: (halfCheckedKeys === null || halfCheckedKeys === void 0 ? void 0 : halfCheckedKeys.indexOf(nodeProps._key)) > -1, loading: loadingKeys.indexOf(nodeProps._key) > -1, checked: checkedKeys && checkedKeys.indexOf(nodeProps._key) > -1, selectedKeys: selectedKeys, checkedKeys: checkedKeys, loadingKeys: loadingKeys, loadedKeys: loadedKeys, expandedKeys: _this.state.expandedKeys, childrenData: nodeProps.children || [], children: null });\n        };\n        _this.handleExpandEnd = function (key) {\n            var currentExpandKeys = _this.state.currentExpandKeys;\n            if (currentExpandKeys.indexOf(key) > -1) {\n                _this.setState({\n                    currentExpandKeys: currentExpandKeys.filter(function (v) { return v !== key; }),\n                });\n            }\n        };\n        // 获取tree的state数据，在子组件里使用。\n        _this.getTreeState = function () {\n            return _this.state;\n        };\n        _this.state = {};\n        var treeData = _this.getTreeData();\n        var nodeList = _this.getNodeList(treeData, context.getPrefixCls('tree'));\n        var _a = _this.getInitCheckedKeys(props.checkedKeys || props.defaultCheckedKeys || []), checkedKeys = _a.checkedKeys, halfCheckedKeys = _a.halfCheckedKeys;\n        _this.state = {\n            selectedKeys: props.selectedKeys || props.defaultSelectedKeys || [],\n            checkedKeys: checkedKeys,\n            halfCheckedKeys: halfCheckedKeys,\n            expandedKeys: _this.getInitExpandedKeys(props.expandedKeys || props.defaultExpandedKeys),\n            loadedKeys: [],\n            loadingKeys: [],\n            currentExpandKeys: [],\n            nodeList: nodeList,\n        };\n        return _this;\n    }\n    Tree.getDerivedStateFromProps = function (nextProps, state) {\n        var newState = {};\n        if ('selectedKeys' in nextProps && !isEqualWith(nextProps.selectedKeys, state.selectedKeys)) {\n            newState.selectedKeys = nextProps.selectedKeys || [];\n        }\n        if (Object.keys(newState).length) {\n            return newState;\n        }\n        return null;\n    };\n    Tree.prototype.componentDidUpdate = function (prevProps) {\n        // 类似 componentWillReceiveProps 周期\n        var _this = this;\n        var prevMergedProps = this.getMergedProps(prevProps);\n        var mergedProps = this.getMergedProps();\n        if (prevProps !== this.props || !isEqualWith(prevMergedProps, mergedProps)) {\n            var newState_1 = {};\n            if (this.needUpdateTreeData(__assign({ prevMergedProps: prevMergedProps }, prevProps), __assign(__assign({}, mergedProps), this.props))) {\n                var treeData = this.getTreeData();\n                var nodeList = this.getNodeList(treeData);\n                newState_1.treeData = treeData;\n                newState_1.nodeList = nodeList;\n            }\n            if (newState_1.treeData ||\n                ('checkedKeys' in this.props && !isEqualWith(prevProps.checkedKeys, this.props.checkedKeys))) {\n                // 说明treeData变了，需要比较下内部checkedKeys\n                var currentCheckedKeys = 'checkedKeys' in this.props ? this.props.checkedKeys : this.state.checkedKeys;\n                var _a = this.getInitCheckedKeys(currentCheckedKeys || []), halfCheckedKeys = _a.halfCheckedKeys, checkedKeys = _a.checkedKeys;\n                if (!isEqualWith(checkedKeys, this.state.checkedKeys)) {\n                    newState_1.checkedKeys = checkedKeys;\n                }\n                if (!isEqualWith(halfCheckedKeys, this.state.halfCheckedKeys)) {\n                    newState_1.halfCheckedKeys = halfCheckedKeys;\n                }\n            }\n            if (this.props.checkStrictly &&\n                'halfCheckedKeys' in this.props &&\n                !isEqualWith(prevProps.halfCheckedKeys, this.props.halfCheckedKeys)) {\n                newState_1.halfCheckedKeys = this.props.halfCheckedKeys;\n            }\n            if ('expandedKeys' in this.props &&\n                !isEqualWith(this.props.expandedKeys, prevProps.expandedKeys)) {\n                newState_1.expandedKeys = this.props.expandedKeys;\n                // 比较前后expandKeys的改变，去重，得到需要收起/展开的动画\n                // 例如 [...[1, 2, 3], ...[1, 3, 4]] 。那么 2 会收起，4会展开。\n                // 如果父节点正在执行收起/展开逻辑，子节点不需要出现在 currentExpandKeys 数组。\n                newState_1.currentExpandKeys = __spreadArray(__spreadArray([], __read(newState_1.expandedKeys), false), __read(this.state.expandedKeys), false).reduce(function (total, next) {\n                    var index = total.indexOf(next);\n                    if (index === -1) {\n                        total.push(next);\n                    }\n                    else {\n                        total.splice(index, 1);\n                    }\n                    return total;\n                }, [])\n                    .filter(function (key, _, array) {\n                    var _a;\n                    if (_this.key2nodeProps[key]) {\n                        var pathParentKeys = _this.key2nodeProps[key].pathParentKeys;\n                        if (pathParentKeys.some(function (x) { return array.indexOf(x) > -1; })) {\n                            return false;\n                        }\n                        return (_a = _this.key2nodeProps[key].children) === null || _a === void 0 ? void 0 : _a.length;\n                    }\n                });\n            }\n            var currentExpandKeys = newState_1.currentExpandKeys || this.state.currentExpandKeys;\n            if (newState_1.treeData && currentExpandKeys) {\n                newState_1.currentExpandKeys = currentExpandKeys.filter(function (key) {\n                    var item = newState_1.treeData.find(function (node) { return node._key === key; });\n                    return item && item.children && item.children.length;\n                });\n            }\n            if (Object.keys(newState_1).length) {\n                this.setState(newState_1);\n            }\n        }\n    };\n    Tree.prototype.render = function () {\n        var _a;\n        var _this = this;\n        // render 之前重置掉，在NodeList里会进行赋值。\n        this.cacheNodes = {};\n        var _b = this.getMergedProps(), className = _b.className, showLine = _b.showLine, size = _b.size, _virtualListProps = _b.virtualListProps, height = _b.height, style = _b.style, icons = _b.icons;\n        var _c = this.props, loadMore = _c.loadMore, checkable = _c.checkable;\n        // 兼容旧 APi : height\n        var virtualListProps = _virtualListProps\n            ? __assign({ threshold: 100 }, _virtualListProps) : height\n            ? { height: height, threshold: 100 }\n            : {\n                threshold: null,\n            };\n        var getPrefixCls = this.context.getPrefixCls;\n        var prefixCls = getPrefixCls('tree');\n        return (React.createElement(TreeContext.Provider, { value: {\n                icons: icons,\n                key2nodeProps: this.key2nodeProps,\n                getFieldInfo: this.getFieldInfo,\n                getTreeState: this.getTreeState,\n                getNodeProps: this.getNodeProps,\n                onExpandEnd: this.handleExpandEnd,\n                onSelect: this.handleSelect,\n                onCheck: this.handleCheck,\n                onNodeDragStart: this.handleNodeDragStart,\n                onNodeDragEnd: this.handleNodeDragEnd,\n                onNodeDragLeave: this.handleNodeDragLeave,\n                onNodeDragOver: this.handleNodeDragOver,\n                onNodeDrop: this.handleNodeDrop,\n                onExpand: this.handleExpand,\n                renderExtra: this.props.renderExtra,\n                renderTitle: this.props.renderTitle,\n                loadMore: loadMore && this.handleLoadMore,\n                allowDrop: this.handleAllowDrop,\n                virtualListProps: virtualListProps,\n            } },\n            React.createElement(NodeList, { ref: function (node) {\n                    _this.nodeListRef = node;\n                }, className: cs(prefixCls, (_a = {},\n                    _a[prefixCls + \"-checkable\"] = checkable,\n                    _a[prefixCls + \"-show-line\"] = showLine,\n                    _a[prefixCls + \"-size-\" + size] = size,\n                    _a), className), style: style, filterNode: this.props.filterNode, virtualListProps: virtualListProps, expandedKeys: this.state.expandedKeys, currentExpandKeys: this.state.currentExpandKeys, getNodeProps: this.getNodeProps, nodeList: this.state.nodeList, saveCacheNode: function (node) {\n                    _this.cacheNodes[node.key] = node;\n                } })));\n    };\n    Tree.displayName = 'Tree';\n    Tree.SHOW_PARENT = 'parent';\n    Tree.SHOW_ALL = 'all';\n    Tree.SHOW_CHILD = 'child';\n    Tree.Node = Node;\n    Tree.contextType = ConfigContext;\n    return Tree;\n}(Component));\nexport default Tree;\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport React, { useState, useMemo, useCallback, forwardRef, useImperativeHandle, useRef, } from 'react';\nimport VirtualList from '../_class/VirtualList';\nimport useUpdate from '../_util/hooks/useUpdate';\nimport Node from './node';\nimport scrollIntoViewIfNeed from '../_util/scrollIntoView';\nfunction getKey(option) {\n    return option.key || option._key;\n}\nfunction NodeList(props, ref) {\n    var className = props.className, style = props.style, filterNode = props.filterNode, virtualListProps = props.virtualListProps, expandedKeys = props.expandedKeys, currentExpandKeys = props.currentExpandKeys, saveCacheNode = props.saveCacheNode, nodeList = props.nodeList, getNodeProps = props.getNodeProps;\n    var isVirtual = (virtualListProps === null || virtualListProps === void 0 ? void 0 : virtualListProps.threshold) !== null;\n    var virtualListRef = useRef();\n    var treeWrapperRef = useRef();\n    var expandedKeysSet = useMemo(function () { return new Set(expandedKeys); }, [expandedKeys]);\n    var visibleKeys = useMemo(function () {\n        var newKeys = new Set();\n        var currentExpandKeysSet = new Set(currentExpandKeys);\n        nodeList.forEach(function (nodeProps) {\n            var pathParentKeys = nodeProps.pathParentKeys || [];\n            // 如果父节点处于正在展开状态，子节点暂时不可见，因为父节点的children会在animaiton中渲染出来。\n            // 当动画完成时，父节点children隐藏，此时在这里渲染子节点。 anyway，一切为了动画！！！\n            if (pathParentKeys.every(function (key) { return !currentExpandKeysSet.has(key) && expandedKeysSet.has(key); })) {\n                newKeys.add(nodeProps._key);\n            }\n        });\n        return newKeys;\n    }, [expandedKeysSet, currentExpandKeys, nodeList]);\n    var calcChildrenList = useCallback(function () {\n        return nodeList.filter(function (item) {\n            var pass = !filterNode || (filterNode && filterNode(item));\n            if (pass && visibleKeys.has(item.key)) {\n                return true;\n            }\n            // 过滤掉的也缓存一下，避免被收起的节点在onSelect回调中，selectedNodes出现undefined\n            saveCacheNode(React.createElement(Node, __assign({}, item, getNodeProps(item), { key: item.key })));\n            return false;\n        });\n    }, [nodeList, filterNode, visibleKeys]);\n    // 默认值不能为nodeList，防止在设置defaultExpandedKeys时，应该被隐藏的节点初始化的时候展示了。\n    var _a = __read(useState(function () {\n        return calcChildrenList();\n    }), 2), childrenList = _a[0], setChildrenList = _a[1];\n    useUpdate(function () {\n        setChildrenList(calcChildrenList());\n    }, [calcChildrenList]);\n    useImperativeHandle(ref, function () {\n        return {\n            // index: 第几个dom元素, 如果传入的是字符串，会作为 node 的 key去查找。\n            // nodeProps: _index 是 key 时，对应的node\n            scrollIntoView: function (_index, nodeProps) {\n                var index = _index;\n                var isKey = typeof _index === 'string';\n                if (isKey) {\n                    var key_1 = _index;\n                    // 查找离得最近的可见的父节点，进行滚动。\n                    if (!visibleKeys.has(_index) && nodeProps && nodeProps.pathParentKeys) {\n                        key_1 =\n                            __spreadArray([], __read(nodeProps.pathParentKeys), false).reverse().find(function (key) { return visibleKeys.has(key); }) || index;\n                    }\n                    // _index attributes and index are not the same due to some hidden items\n                    index = childrenList.findIndex(function (_a) {\n                        var _key = _a._key;\n                        return _key === key_1;\n                    });\n                }\n                if (!isVirtual && treeWrapperRef.current) {\n                    var wrapperDom = treeWrapperRef.current;\n                    var node = wrapperDom ? wrapperDom.children[index] : null;\n                    node &&\n                        scrollIntoViewIfNeed(node, {\n                            boundary: wrapperDom.parentElement,\n                        });\n                }\n                else if (virtualListRef.current) {\n                    virtualListRef.current.scrollTo({ index: index });\n                }\n            },\n        };\n    });\n    return isVirtual ? (React.createElement(VirtualList, __assign({ className: className, style: style, ref: virtualListRef, data: childrenList, isStaticItemHeight: false, itemKey: getKey }, virtualListProps), function (item) {\n        var node = React.createElement(Node, __assign({}, item, getNodeProps(item, expandedKeysSet), { key: item.key }));\n        saveCacheNode(node);\n        return node;\n    })) : (React.createElement(\"div\", { className: className, style: style, ref: treeWrapperRef }, childrenList.map(function (item) {\n        var node = React.createElement(Node, __assign({}, item, getNodeProps(item, expandedKeysSet), { key: item.key }));\n        saveCacheNode(node);\n        return node;\n    })));\n}\nexport default forwardRef(NodeList);\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport React, { forwardRef, useContext, useRef, useState, useCallback, } from 'react';\nimport Checkbox from '../Checkbox';\nimport cs from '../_util/classNames';\nimport { isFunction } from '../_util/is';\nimport IconCaretDown from '../../icon/react-icon/IconCaretDown';\nimport IconDragDotVertical from '../../icon/react-icon/IconDragDotVertical';\nimport IconLoading from '../../icon/react-icon/IconLoading';\nimport IconFile from '../../icon/react-icon/IconFile';\nimport { ConfigContext } from '../ConfigProvider';\nimport IconHover from '../_class/icon-hover';\nimport { TreeContext } from './context';\nimport AnimationNode from './animation';\nimport throttleByRaf from '../_util/throttleByRaf';\nfunction TreeNode(props, ref) {\n    var _a, _b, _c;\n    var _this = this;\n    var treeContext = useContext(TreeContext);\n    var getPrefixCls = useContext(ConfigContext).getPrefixCls;\n    // const prevProps: NodeProps = usePrevious(props) || {};\n    var nodeTitleRef = useRef();\n    var _d = __read(useState({\n        isAllowDrop: true,\n        isDragOver: false,\n        dragPosition: 0,\n        isDragging: false,\n    }), 2), state = _d[0], setState = _d[1];\n    var _e = props._key, _key = _e === void 0 ? '' : _e, title = props.title, icon = props.icon, checkable = props.checkable, selected = props.selected, disabled = props.disabled, disableCheckbox = props.disableCheckbox, isLeaf = props.isLeaf, draggable = props.draggable, expanded = props.expanded, showLine = props.showLine, loading = props.loading, _f = props.selectable, selectable = _f === void 0 ? true : _f;\n    var prefixCls = getPrefixCls('tree-node');\n    var classNames = cs(prefixCls, (_a = {},\n        _a[prefixCls + \"-selected\"] = selected,\n        _a[prefixCls + \"-is-leaf\"] = isLeaf,\n        _a[prefixCls + \"-expanded\"] = expanded,\n        _a[prefixCls + \"-disabled-selectable\"] = !selectable,\n        _a[prefixCls + \"-disabled\"] = disabled,\n        _a[prefixCls + \"-draggable\"] = draggable,\n        _a), props.className);\n    var icons = (function () {\n        var treeIcons = isFunction(treeContext.icons) ? treeContext.icons(props) : treeContext.icons;\n        var propsIcons = isFunction(props.icons) ? props.icons(props) : props.icons;\n        return __assign(__assign({}, treeIcons), propsIcons);\n    })();\n    var setExpand = useCallback(function (newExpand) {\n        if (newExpand === expanded) {\n            return;\n        }\n        treeContext.onExpand && treeContext.onExpand(newExpand, _key);\n    }, [expanded, treeContext.onExpand]);\n    var switchExpandStatus = useCallback(function () { return __awaiter(_this, void 0, void 0, function () {\n        var isLeaf, expanded;\n        var _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    isLeaf = props.isLeaf, expanded = props.expanded;\n                    if (isLeaf) {\n                        return [2 /*return*/];\n                    }\n                    if (!(!((_a = props.childrenData) === null || _a === void 0 ? void 0 : _a.length) && isFunction(treeContext.loadMore) && !expanded)) return [3 /*break*/, 2];\n                    return [4 /*yield*/, treeContext.loadMore(props)];\n                case 1:\n                    _b.sent();\n                    return [3 /*break*/, 3];\n                case 2:\n                    setExpand(!expanded);\n                    _b.label = 3;\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); }, [props, setExpand, treeContext.loadMore]);\n    var getPrefixIcon = function () {\n        if (loading) {\n            return 'loadingIcon' in icons ? icons.loadingIcon : React.createElement(IconLoading, null);\n        }\n        var icon = null;\n        var needIconHover = false;\n        if (!isLeaf) {\n            var defaultIcon = showLine ? (React.createElement(\"span\", { className: prefixCls + \"-\" + (expanded ? 'minus' : 'plus') + \"-icon\" })) : (React.createElement(IconCaretDown, null));\n            icon = 'switcherIcon' in icons ? icons.switcherIcon : defaultIcon;\n            needIconHover = !showLine;\n        }\n        else if (showLine) {\n            icon = 'switcherIcon' in icons ? icons.switcherIcon : React.createElement(IconFile, null);\n            needIconHover = true;\n        }\n        if (icon) {\n            icon = (React.createElement(\"span\", { className: prefixCls + \"-switcher-icon\", onClick: switchExpandStatus }, icon));\n            return needIconHover ? React.createElement(IconHover, { prefix: prefixCls }, icon) : icon;\n        }\n    };\n    var updateDragOverState = useCallback(throttleByRaf(function (e) {\n        var dom = nodeTitleRef.current;\n        if (!dom)\n            return;\n        var rect = dom.getBoundingClientRect();\n        var offsetY = window.pageYOffset + rect.top;\n        var pageY = e.pageY;\n        var gapHeight = rect.height / 4;\n        var diff = pageY - offsetY;\n        var position = diff < gapHeight ? -1 : diff < rect.height - gapHeight ? 0 : 1;\n        var isAllowDrop = treeContext.allowDrop(props, position);\n        setState(__assign(__assign({}, state), { isAllowDrop: isAllowDrop, isDragOver: true, dragPosition: position }));\n        treeContext.onNodeDragOver && treeContext.onNodeDragOver(e, props, position);\n    }), [treeContext.onNodeDragOver]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { style: props.style, className: classNames, ref: ref },\n            React.createElement(\"span\", { className: prefixCls + \"-indent\" }, __spreadArray([], __read(Array(props._level)), false).map(function (_, i) {\n                var _a;\n                return (React.createElement(\"span\", { className: cs(prefixCls + \"-indent-block\", (_a = {},\n                        _a[prefixCls + \"-indent-block-lineless\"] = props._lineless && props._lineless[i],\n                        _a)), key: i }));\n            })),\n            React.createElement(\"span\", { className: cs(prefixCls + \"-switcher\", (_b = {},\n                    _b[prefixCls + \"-switcher-expanded\"] = expanded,\n                    _b)) }, getPrefixIcon()),\n            checkable ? (React.createElement(Checkbox, { disabled: disableCheckbox || disabled, value: _key, indeterminate: props.indeterminated, checked: props.checked, onChange: function (checked, e) {\n                    var disableCheckbox = props.disableCheckbox, disabled = props.disabled;\n                    if (disableCheckbox || disabled) {\n                        return;\n                    }\n                    treeContext.onCheck && treeContext.onCheck(checked, _key, e);\n                } })) : null,\n            React.createElement(\"span\", { ref: nodeTitleRef, className: cs(prefixCls + \"-title\", (_c = {},\n                    _c[prefixCls + \"-title-draggable\"] = draggable,\n                    _c[prefixCls + \"-title-gap-top\"] = state.isDragOver && state.isAllowDrop && state.dragPosition < 0,\n                    _c[prefixCls + \"-title-gap-bottom\"] = state.isDragOver && state.isAllowDrop && state.dragPosition > 0,\n                    _c[prefixCls + \"-title-highlight\"] = !state.isDragging &&\n                        state.isDragOver &&\n                        state.isAllowDrop &&\n                        state.dragPosition === 0,\n                    _c[prefixCls + \"-title-dragging\"] = state.isDragging,\n                    _c[prefixCls + \"-title-block\"] = props.blockNode,\n                    _c)), onClick: function (e) {\n                    var onSelect = treeContext.onSelect;\n                    !props.disabled && selectable && onSelect && onSelect(_key, e);\n                }, draggable: draggable, onDrop: function (e) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    treeContext.onNodeDrop && treeContext.onNodeDrop(e, props, state.dragPosition);\n                    updateDragOverState.cancel();\n                    setState(__assign(__assign({}, state), { isDragOver: false, dragPosition: 0 }));\n                }, onDragStart: function (e) {\n                    if (!draggable)\n                        return;\n                    e.stopPropagation();\n                    // 当前节点正在被拖拽\n                    setState(__assign(__assign({}, state), { isDragging: true }));\n                    treeContext.onNodeDragStart && treeContext.onNodeDragStart(e, props);\n                    try {\n                        // ie throw error\n                        // firefox-need-it\n                        e.dataTransfer.setData('text/plain', '');\n                    }\n                    catch (error) {\n                        // empty\n                    }\n                }, onDragEnd: function (e) {\n                    if (!draggable)\n                        return;\n                    e.stopPropagation();\n                    updateDragOverState.cancel();\n                    setState(__assign(__assign({}, state), { isDragOver: false, isDragging: false }));\n                    treeContext.onNodeDragEnd && treeContext.onNodeDragEnd(e, props);\n                }, onDragOver: function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    e.persist();\n                    updateDragOverState(e);\n                }, onDragLeave: function (e) {\n                    if (!draggable)\n                        return;\n                    e.stopPropagation();\n                    updateDragOverState.cancel();\n                    setState(__assign(__assign({}, state), { isDragOver: false }));\n                    treeContext.onNodeDragLeave && treeContext.onNodeDragLeave(e, props);\n                } },\n                icon && React.createElement(\"span\", { className: prefixCls + \"-icon \" + prefixCls + \"-custom-icon\" }, icon),\n                React.createElement(\"span\", { className: prefixCls + \"-title-text\" }, isFunction(treeContext.renderTitle) ? treeContext.renderTitle(props) : title),\n                draggable && (React.createElement(\"span\", { className: prefixCls + \"-icon \" + prefixCls + \"-drag-icon\" }, 'dragIcon' in icons ? icons.dragIcon : React.createElement(IconDragDotVertical, null)))),\n            isFunction(treeContext.renderExtra) && treeContext.renderExtra(props)),\n        React.createElement(AnimationNode, __assign({}, props))));\n}\nvar TreeNodeComponent = forwardRef(TreeNode);\nTreeNodeComponent.displayName = 'TreeNode';\nexport default React.memo(TreeNodeComponent);\n","import '../../style/index.less';\nimport '../../Checkbox/style';\nimport './index.less';\n","var api = require(\"!../../../../../_style-loader@1.3.0@style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../_css-loader@3.6.0@css-loader/dist/cjs.js??ref--9-1!../../../../../_postcss-loader@4.3.0@postcss-loader/dist/cjs.js??ref--9-2!../../../../../_less-loader@4.1.0@less-loader/dist/cjs.js??ref--9-3!./index.less\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport React from 'react';\nexport var getTreeDataFromTreeChildren = function (treeChildren) {\n    var loop = function (children) {\n        return React.Children.map(children, function (child) {\n            if (!React.isValidElement(child)) {\n                return;\n            }\n            var key = child.key;\n            return __assign(__assign({}, child.props), { key: key, children: loop(child.props.children) });\n        });\n    };\n    return loop(treeChildren);\n};\nexport function getChildNodeKeys(node, key2nodeProps) {\n    var nodes = new Set();\n    var loop = function (children) {\n        children.map(function (child) {\n            var key = child.key;\n            var item = key2nodeProps[key];\n            if (!item || item.disabled || item.disableCheckbox || item.checkable === false) {\n                return;\n            }\n            nodes.add(key);\n            loop(item.children || []);\n        });\n    };\n    if (node) {\n        loop(node.children || []);\n    }\n    return nodes;\n}\nvar updateParent = function (key, key2nodeProps, allKeys, indeterminateKeysSet) {\n    var pathParentKeys = __spreadArray([], __read(key2nodeProps[key].pathParentKeys), false);\n    // 逐级更新父节点的状态\n    pathParentKeys.reverse().forEach(function (itemKey) {\n        var parent = key2nodeProps[itemKey];\n        if (parent && !parent.disabled && !parent.disableCheckbox && parent.checkable !== false) {\n            var total_1 = 0;\n            var number_1 = 0;\n            parent.children.some(function (_a) {\n                var key = _a.key;\n                var item = key2nodeProps[key];\n                // 不符合可选条件\n                if (!item || item.disabled || item.disableCheckbox || item.checkable === false) {\n                    return false;\n                }\n                total_1++;\n                if (allKeys.has(key)) {\n                    number_1++;\n                }\n                else if (indeterminateKeysSet.has(key)) {\n                    // 只要有一个半选，就不用再算了 ，父节点是半选\n                    number_1 += 0.5;\n                    return true;\n                }\n            });\n            if (!number_1 || number_1 === total_1) {\n                indeterminateKeysSet.delete(itemKey);\n            }\n            else {\n                indeterminateKeysSet.add(itemKey);\n            }\n            if (number_1 && number_1 === total_1) {\n                allKeys.add(itemKey);\n            }\n            else {\n                allKeys.delete(itemKey);\n            }\n        }\n    });\n};\n// also used by tree-select\nexport function getCheckedKeysByInitKeys(checkedKeys, key2nodeProps) {\n    var checkedKeysSet = new Set(checkedKeys || []);\n    var indeterminateKeysSet = new Set();\n    var childCheckedKeysSet = new Set();\n    checkedKeys.forEach(function (key) {\n        if (!childCheckedKeysSet.has(key)) {\n            var childKeys = getChildNodeKeys(key2nodeProps[key], key2nodeProps);\n            // 选中了节点，就找到所有符合条件的子节点的key.自身的选中状态需要根据children判断。\n            childKeys.forEach(function (v) {\n                childCheckedKeysSet.add(v);\n            });\n        }\n        if (key2nodeProps[key] &&\n            !key2nodeProps[key].pathParentKeys.some(function (_key) { return checkedKeysSet.has(_key); })) {\n            updateParent(key, key2nodeProps, checkedKeysSet, indeterminateKeysSet);\n        }\n    });\n    return {\n        checkedKeys: __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(checkedKeysSet), false), __read(childCheckedKeysSet), false))), false),\n        indeterminateKeys: __spreadArray([], __read(indeterminateKeysSet), false),\n    };\n}\n// also used by tree-select\nexport function getAllCheckedKeysByCheck(key, checked, checkedKeys, key2nodeProps, indeterminateKeys) {\n    if (!key2nodeProps[key]) {\n        return {\n            checkedKeys: checkedKeys,\n            indeterminateKeys: indeterminateKeys,\n        };\n    }\n    var checkedKeysSet = new Set(checkedKeys);\n    var indeterminateKeysSet = new Set(indeterminateKeys);\n    var childKeys = getChildNodeKeys(key2nodeProps[key], key2nodeProps);\n    var allKeys = checkedKeysSet;\n    if (checked) {\n        // 选中了节点，就找到所有符合条件的子节点的key.自身的选中状态需要根据children判断。\n        allKeys.add(key);\n        indeterminateKeysSet.delete(key);\n        childKeys.forEach(function (v) {\n            allKeys.add(v);\n        });\n    }\n    else {\n        indeterminateKeysSet.delete(key);\n        // 移除所有符合条件的子节点的key\n        allKeys.delete(key);\n        childKeys.forEach(function (v) {\n            allKeys.delete(v);\n        });\n    }\n    // 之后逐级更新父节点的选中状态。\n    updateParent(key, key2nodeProps, checkedKeysSet, indeterminateKeysSet);\n    return {\n        checkedKeys: __spreadArray([], __read(allKeys), false),\n        indeterminateKeys: __spreadArray([], __read(indeterminateKeysSet), false),\n    };\n}\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../_css-loader@3.6.0@css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"/******** borderSize *******/\\n/******** borderStyle *******/\\n/******** radius *******/\\n/******** shadow distance *******/\\n/******** size *******/\\n/******** spacing *******/\\n/******** shadow *******/\\n/******** opacity *******/\\n/******** fontSize *******/\\n/******** fontWeight ********/\\n/******** Primary *******/\\n/******** success *******/\\n/******** warning *******/\\n/******** danger *******/\\n/******** link *******/\\n/******** radius *******/\\n/********* icon hover *********/\\n/******* icon ******/\\n.arco-icon-hover.arco-tree-node-icon-hover::before {\\n  width: 16px;\\n  height: 16px;\\n}\\n.arco-tree-node-switcher {\\n  font-size: 12px;\\n  color: var(--color-text-2);\\n  cursor: pointer;\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n      -ms-user-select: none;\\n          user-select: none;\\n  display: flex;\\n  align-items: center;\\n  position: relative;\\n  margin-right: 10px;\\n  height: 32px;\\n  width: 12px;\\n  flex-shrink: 0;\\n}\\n.arco-tree-node-switcher-icon {\\n  position: relative;\\n  margin: 0 auto;\\n}\\n.arco-tree-node-switcher-icon svg {\\n  transform: rotate(-90deg);\\n  position: relative;\\n  transition: transform 0.2s cubic-bezier(0.34, 0.69, 0.1, 1);\\n}\\n.arco-tree-node-expanded .arco-tree-node-switcher-icon svg,\\n.arco-tree-node-is-leaf .arco-tree-node-switcher-icon svg {\\n  transform: rotate(0);\\n}\\n.arco-tree-node-drag-icon {\\n  color: rgb(var(--primary-6));\\n  opacity: 0;\\n  margin-left: 120px;\\n}\\n.arco-tree-node-custom-icon {\\n  font-size: inherit;\\n  cursor: pointer;\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n      -ms-user-select: none;\\n          user-select: none;\\n  margin-right: 10px;\\n}\\n.arco-tree-node .arco-icon-loading {\\n  color: rgb(var(--primary-6));\\n}\\n.arco-tree-node-minus-icon,\\n.arco-tree-node-plus-icon {\\n  cursor: pointer;\\n  background: var(--color-fill-2);\\n  border-radius: var(--border-radius-small);\\n  position: relative;\\n  display: block;\\n  width: 14px;\\n  height: 14px;\\n}\\n.arco-tree-node-minus-icon::after,\\n.arco-tree-node-plus-icon::after {\\n  content: '';\\n  position: absolute;\\n  display: block;\\n  color: var(--color-text-2);\\n  width: 6px;\\n  height: 2px;\\n  background-color: var(--color-text-2);\\n  border-radius: 0.5px;\\n  top: 50%;\\n  left: 50%;\\n  margin-top: -1px;\\n  margin-left: -3px;\\n}\\n.arco-tree-node-plus-icon::before {\\n  content: '';\\n  border-radius: 0.5px;\\n  position: absolute;\\n  display: block;\\n  color: var(--color-text-2);\\n  height: 6px;\\n  width: 2px;\\n  background-color: var(--color-text-2);\\n  left: 50%;\\n  margin-left: -1px;\\n  top: 50%;\\n  margin-top: -3px;\\n}\\n/******* tree ***********/\\n.arco-tree {\\n  color: var(--color-text-1);\\n}\\n.arco-tree .arco-checkbox {\\n  margin-right: 10px;\\n  padding-left: 0;\\n  line-height: 32px;\\n}\\n.arco-tree-node {\\n  padding-left: 2px;\\n  color: var(--color-text-1);\\n  position: relative;\\n  cursor: pointer;\\n  display: flex;\\n  align-items: flex-start;\\n  flex-wrap: nowrap;\\n  line-height: 1.5715;\\n}\\n.arco-tree-node-selected .arco-tree-node-title,\\n.arco-tree-node-selected .arco-tree-node-title:hover {\\n  color: rgb(var(--primary-6));\\n  transition: color 0.2s cubic-bezier(0, 0, 1, 1);\\n}\\n.arco-tree-node-disabled-selectable .arco-tree-node-title,\\n.arco-tree-node-disabled .arco-tree-node-title,\\n.arco-tree-node-disabled-selectable .arco-tree-node-title:hover,\\n.arco-tree-node-disabled .arco-tree-node-title:hover {\\n  background: none;\\n  color: var(--color-text-4);\\n  cursor: not-allowed;\\n}\\n.arco-tree-node-disabled.arco-tree-node-selected .arco-tree-node-title {\\n  color: var(--color-primary-light-3);\\n}\\n.arco-tree-node-title-block {\\n  flex: 1;\\n  box-sizing: content-box;\\n}\\n.arco-tree-node-title-block .arco-tree-node-drag-icon {\\n  position: absolute;\\n  right: 12px;\\n}\\n.arco-tree-node-indent {\\n  align-self: stretch;\\n  flex-shrink: 0;\\n  position: relative;\\n}\\n.arco-tree-node-indent-block {\\n  display: inline-block;\\n  width: 12px;\\n  margin-right: 10px;\\n  height: 100%;\\n  position: relative;\\n}\\n.arco-tree-node-title {\\n  font-size: 14px;\\n  padding: 5px 0;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  margin-left: -4px;\\n  border-radius: var(--border-radius-small);\\n  position: relative;\\n}\\n.arco-tree-node-title:hover {\\n  background-color: var(--color-fill-2);\\n  color: var(--color-text-1);\\n}\\n.arco-tree-node-title:hover .arco-tree-node-drag-icon {\\n  opacity: 1;\\n}\\n.arco-tree-node-title-draggable::before {\\n  content: '';\\n  display: block;\\n  height: 2px;\\n  border-radius: 1px;\\n  left: 0;\\n  right: 0;\\n  position: absolute;\\n  top: 0;\\n}\\n.arco-tree-node-title-gap-bottom::before {\\n  top: unset;\\n  bottom: 0;\\n  background-color: rgb(var(--primary-6));\\n}\\n.arco-tree-node-title-gap-top::before {\\n  background-color: rgb(var(--primary-6));\\n}\\n.arco-tree-node-title-highlight {\\n  background-color: var(--color-primary-light-1);\\n  color: var(--color-text-1);\\n}\\n.arco-tree-node-title-dragging,\\n.arco-tree-node-title-dragging:hover {\\n  background-color: var(--color-fill-1);\\n  color: var(--color-text-4);\\n}\\n.arco-tree-show-line {\\n  padding-left: 1px;\\n}\\n.arco-tree-show-line .arco-tree-node-switcher {\\n  width: 14px;\\n  text-align: center;\\n}\\n.arco-tree-show-line .arco-tree-node-switcher .arco-tree-node-icon-hover {\\n  width: 100%;\\n}\\n.arco-tree-show-line .arco-tree-node-indent-block {\\n  width: 14px;\\n}\\n.arco-tree-show-line .arco-tree-node-indent-block::before {\\n  position: absolute;\\n  left: 50%;\\n  transform: translateX(-50%);\\n  width: 1px;\\n  border-left: 1px solid var(--color-neutral-3);\\n  content: '';\\n  box-sizing: border-box;\\n  top: -5px;\\n  bottom: -5px;\\n}\\n.arco-tree-show-line .arco-tree-node-is-leaf:not(.arco-tree-node-is-tail) .arco-tree-node-indent::after {\\n  content: '';\\n  position: absolute;\\n  box-sizing: border-box;\\n  border-left: 1px solid var(--color-neutral-3);\\n  width: 1px;\\n  right: -7px;\\n  transform: translateX(50%);\\n  top: 27px;\\n  bottom: -5px;\\n}\\n.arco-tree-show-line .arco-tree-node-indent-block-lineless::before {\\n  display: none;\\n}\\n/******** size *******/\\n.arco-tree-size-mini .arco-tree-node-switcher {\\n  height: 24px;\\n}\\n.arco-tree-size-mini .arco-checkbox {\\n  line-height: 24px;\\n}\\n.arco-tree-size-mini .arco-tree-node-title {\\n  font-size: 12px;\\n  line-height: 1.667;\\n  padding-top: 2px;\\n  padding-bottom: 2px;\\n}\\n.arco-tree-size-mini .arco-tree-node-indent-block::before {\\n  top: 23px;\\n  bottom: -1px;\\n}\\n.arco-tree-size-mini .arco-tree-node-is-leaf:not(.arco-tree-node-is-tail) .arco-tree-node-indent::after {\\n  top: -1px;\\n  bottom: -1px;\\n}\\n.arco-tree-size-small .arco-tree-node-switcher {\\n  height: 28px;\\n}\\n.arco-tree-size-small .arco-checkbox {\\n  line-height: 28px;\\n}\\n.arco-tree-size-small .arco-tree-node-title {\\n  font-size: 14px;\\n  padding-top: 3px;\\n  padding-bottom: 3px;\\n}\\n.arco-tree-size-small .arco-tree-node-indent-block::before {\\n  top: 25px;\\n  bottom: -3px;\\n}\\n.arco-tree-size-small .arco-tree-node-is-leaf:not(.arco-tree-node-is-tail) .arco-tree-node-indent::after {\\n  top: -3px;\\n  bottom: -3px;\\n}\\n.arco-tree-size-large .arco-tree-node-switcher {\\n  height: 36px;\\n}\\n.arco-tree-size-large .arco-checkbox {\\n  line-height: 36px;\\n}\\n.arco-tree-size-large .arco-tree-node-title {\\n  font-size: 14px;\\n  padding-top: 7px;\\n  padding-bottom: 7px;\\n}\\n.arco-tree-size-large .arco-tree-node-indent-block::before {\\n  top: 29px;\\n  bottom: -7px;\\n}\\n.arco-tree-size-large .arco-tree-node-is-leaf:not(.arco-tree-node-is-tail) .arco-tree-node-indent::after {\\n  top: -7px;\\n  bottom: -7px;\\n}\\n.arco-tree-node-list {\\n  overflow: hidden;\\n  transition: height 0.2s cubic-bezier(0.34, 0.69, 0.1, 1);\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n"],"mappingstrlpKA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}